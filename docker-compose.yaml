services:
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/config:/etc/loki
      - ./observability/loki/data:/loki
      - ./observability/loki/wal:/wal
    command: -config.file=/etc/loki/loki-config.yaml

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./observability/promtail/config:/etc/promtail
      - /var/log/app:/var/log/app
    command: -config.file=/etc/promtail/promtail-config.yaml

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./observability/grafana/data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
  server:
    container_name: server
    build:
      context: ./go  # Set the build context to the go directory
      dockerfile: cmd/server/Dockerfile  # Specify the Dockerfile path relative to the build context
    ports:
      - "8080:8080"
    volumes:
      - ./observability/server/logs:/app/logs/server
    depends_on:
      rabbitmq:
        condition: service_healthy  # Correct placement of health condition
    environment:
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672/ # amqp://admin:admin@rabbitmq:5672/
    networks:
      - smartess_network
  
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management #TODO: Development only. For Production, use: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_URI=amqp://admin:admin@localhost:5672/ # amqp://guest:guest@localhost:5672/
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]  # Check RabbitMQ status only
      interval: 10s      # Check every 10 seconds
      timeout: 5s        # Time allowed for RabbitMQ to respond
      retries: 3         # Retry up to 3 times before marking the service as unhealthy
      start_period: 15s  # Allow up to 15 seconds for RabbitMQ to start before healthcheck begins
    networks:
      - smartess_network
  
  mock_hub:
    container_name: mockhub
    build:
      context: ./go/cmd/mock_hub
    ports:
      - "8765:8765"
networks:
  smartess_network:
    external: true