services:
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/config:/etc/loki
      - ./observability/loki/data:/loki
      - ./observability/loki/wal:/wal
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - smartess_network

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./observability/promtail/config:/etc/promtail
      - ./go/cmd/server/logs:/app/logs
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - smartess_network

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "4000:4000"
    volumes:
      - ./observability/grafana/data:/var/lib/grafana
      - ./observability/grafana/init-scripts:/etc/grafana/provisioning/dashboards # For dashboards
      - ./observability/grafana/init-scripts:/etc/grafana/provisioning/datasources # For data sources

    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - loki
    networks:
      - smartess_network
  server:
    container_name: server
    build:
      context: ./go # Set the build context to the go directory
      dockerfile: cmd/server/Dockerfile # Specify the Dockerfile path relative to the build context
    ports:
      - "8080:8080"
    volumes:
      - ./go/cmd/server/logs:/app/logs
      - ./go/common/configs:/app/config
    depends_on:
      rabbitmq:
        condition: service_healthy # Correct placement of health condition
    environment:
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672/ # amqp://admin:admin@rabbitmq:5672/
      MONGO_STRING: mongodb+srv://cluster0admin:cluster0admin@cluster0.yko5a.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
    networks:
      - smartess_network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management #TODO: Development only. For Production, use: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672" # management
      - "15674:15674" # web stomp
      - "15675:15675" # stomp
      - "5552:5552" # stream
    volumes:
      - ./data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_URI=amqp://admin:admin@localhost:5672/ # amqp://guest:guest@localhost:5672/
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ] # Check RabbitMQ status only
      interval: 10s # Check every 10 seconds
      timeout: 5s # Time allowed for RabbitMQ to respond
      retries: 3 # Retry up to 3 times before marking the service as unhealthy
      start_period: 15s # Allow up to 15 seconds for RabbitMQ to start before healthcheck begins
    networks:
      - smartess_network
    command: >
      bash -c "
      rabbitmq-plugins enable rabbitmq_web_stomp &&
      rabbitmq-plugins enable rabbitmq_stream rabbitmq_stream_management &&
      rabbitmq-server"

#  #to launch only smartess web use the following command: docker-compose up --build smartessweb
#  smartessweb_dev:
#    container_name: smartessweb_dev
#    build:
#      context: .
#      dockerfile: smartessweb/Dockerfile.dev
#    ports:
#      - "3000:3000"
#      - "3001:3001"
#    volumes:
#      - ./smartessweb:/app
#      - /app/node_modules
#      - /app/.next
#      - /app/frontend/node_modules
#      - /app/frontend/.next
#    networks:
#      - smartess_network
#
#  smartessweb_prod_backend:
#    container_name: smartessweb_prod_backend
#    build:
#      context: .
#      dockerfile: smartessweb/Dockerfile.prod.backend
#    ports:
#      - "3001:3001"
#    environment:
#      - NODE_ENV=production
#    #    depends_on:
#    #      - rabbitmq
#    networks:
#      - smartess_network
#
#  smartessweb_prod_frontend:
#    container_name: smartessweb_prod_frontend
#    build:
#      context: .
#      dockerfile: smartessweb/Dockerfile.prod.frontend
#    ports:
#      - "3000:3000"
#    environment:
#      - NODE_ENV=production
#    networks:
#      - smartess_network
# make sure to use docker network create smartess_network for first time use
networks:
  smartess_network:
    external: true
